#!/usr/bin/env node
const { build, scandir, watchdir, cliopts, glob, file } = require("estrella")
const fs = require("fs")
const Path = require("path")
const CoffeeScript = require("coffeescript")

// directory where we will write js files generated by CoffeeScript
const jsdir = "tmp"

// 1. Compile all .coffee files to .js files.
// 2. Using esbuild, compile .js files into a bundle.
// 3. In watch mode, recompile as coffee and js files change.
compileCoffeScripts(glob("*.coffee")).then(() => {
  const { rebuild } = build({
    entry:   Path.join(jsdir, "main.coffee.js"),
    outfile: Path.join("out", "main.js"),
    bundle: true,
  })
  if (cliopts.watch) {
    watchdir(".", /\.coffee$/i, changedFiles =>
      compileCoffeScripts(changedFiles).then(rebuild))
  }
})

// compileCoffeScripts compiles all provided .coffee files.
// Returns true if all succeeded.
function compileCoffeScripts(files) {
  return Promise.all(files.map(compileCoffeeScript)).then(v => {
    return v.every(ok => ok)
  })
}

// compileCoffeeScript compiles one .coffee file to a .js file. E.g.
//   foo/bar.coffee -> {jsdir}/foo/bar.coffee.js
// Returns true on success. On error, message is logged and false is returned.
async function compileCoffeeScript(filename) {
  const code = await file.read(filename, "utf8")
  try {
    const { js } = CoffeeScript.compile(code, {
      sourceMap: true,
      inlineMap: true,
      bare: true,
      filename,
    })
    const jsfile = Path.join(jsdir, filename + ".js")
    await file.write(jsfile, js, "utf8")
  } catch (err) {
    // CoffeeScript error objects contain a nicely formatted message
    console.error(err.toString())
    return false
  }
  return true
}
